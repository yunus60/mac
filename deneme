import React, { useState, useEffect, useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell, Area, AreaChart } from 'recharts';
import { Calculator, Phone, Clock, Target, TrendingUp, Users, Activity, Settings, Upload, FileSpreadsheet, Download } from 'lucide-react';
import * as XLSX from 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js';
import _ from 'lodash';

const ErlangCCalculator = () => {
  const [uploadedData, setUploadedData] = useState([]);
  const [selectedTeam, setSelectedTeam] = useState('all');
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [targets, setTargets] = useState({
    serviceLevel: 80,
    answerTime: 20,
    utilizationTarget: 85
  });
  const [activeTab, setActiveTab] = useState('upload');
  const [isDataProcessed, setIsDataProcessed] = useState(false);

  // Excel dosyası yükleme
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
        const jsonData = XLSX.utils.sheet_to_json(firstSheet);

        // Veri validasyonu ve dönüştürme
        const processedData = jsonData.map(row => ({
          ekipAdi: row.Ekip_Adi || row['Ekip Adı'] || '',
          tarih: row.Tarih || '',
          gunlukCagriSayisi: parseInt(row.Gunluk_Cagri_Sayisi || row['Günlük Çağrı Sayısı']) || 0,
          toplamKonusmaSuresi: parseInt(row.Toplam_Konusma_Suresi_Saniye || row['Toplam Konuşma Süresi (Saniye)']) || 0,
          calismaSaati: parseFloat(row.Calisma_Saati || row['Çalışma Saati']) || 8,
          ajanSayisi: parseInt(row.Ajan_Sayisi || row['Ajan Sayısı']) || 1
        })).filter(row => row.ekipAdi && row.tarih);

        setUploadedData(processedData);
        setIsDataProcessed(true);

        // Tarih aralığını otomatik ayarla
        const dates = processedData.map(row => row.tarih).sort();
        if (dates.length > 0) {
          setDateRange({
            start: dates[0],
            end: dates[dates.length - 1]
          });
        }

        alert(`✅ ${processedData.length} satır veri başarıyla yüklendi!`);
      } catch (error) {
        alert('❌ Dosya okuma hatası: ' + error.message);
      }
    };
    reader.readAsArrayBuffer(file);
  };

  // Örnek Excel dosyası indir
  const downloadTemplate = () => {
    const templateData = [
      {
        'Ekip_Adi': 'Satış Ekibi',
        'Tarih': '2024-01-01',
        'Gunluk_Cagri_Sayisi': 150,
        'Toplam_Konusma_Suresi_Saniye': 7200,
        'Calisma_Saati': 9,
        'Ajan_Sayisi': 5
      },
      {
        'Ekip_Adi': 'Destek Ekibi',
        'Tarih': '2024-01-01',
        'Gunluk_Cagri_Sayisi': 200,
        'Toplam_Konusma_Suresi_Saniye': 12000,
        'Calisma_Saati': 10.5,
        'Ajan_Sayisi': 8
      },
      {
        'Ekip_Adi': 'Satış Ekibi',
        'Tarih': '2024-01-02',
        'Gunluk_Cagri_Sayisi': 175,
        'Toplam_Konusma_Suresi_Saniye': 8400,
        'Calisma_Saati': 9,
        'Ajan_Sayisi': 5
      }
    ];

    const ws = XLSX.utils.json_to_sheet(templateData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Cagri_Merkezi_Verileri');
    XLSX.writeFile(wb, 'erlang_c_template.xlsx');
  };

  // Veri filtreleme
  const filteredData = useMemo(() => {
    let filtered = uploadedData;

    if (selectedTeam !== 'all') {
      filtered = filtered.filter(row => row.ekipAdi === selectedTeam);
    }

    if (dateRange.start && dateRange.end) {
      filtered = filtered.filter(row => 
        row.tarih >= dateRange.start && row.tarih <= dateRange.end
      );
    }

    return filtered;
  }, [uploadedData, selectedTeam, dateRange]);

  // Ekip listesi
  const teams = useMemo(() => {
    return [...new Set(uploadedData.map(row => row.ekipAdi))];
  }, [uploadedData]);

  // Erlang C hesaplamaları - filtrelenmiş veri için
  const calculations = useMemo(() => {
    if (filteredData.length === 0) {
      return {
        totalCalls: 0,
        totalHandleTime: 0,
        avgWorkingHours: 0,
        avgAgents: 0,
        callsPerHour: 0,
        aht: 0,
        trafficIntensity: 0,
        utilization: 0,
        serviceLevel: 0,
        averageWaitTime: 0,
        requiredAgents: 0,
        agentDifference: 0,
        dataPeriod: 0
      };
    }

    // Toplam değerler
    const totalCalls = _.sumBy(filteredData, 'gunlukCagriSayisi');
    const totalHandleTime = _.sumBy(filteredData, 'toplamKonusmaSuresi');
    const avgWorkingHours = _.meanBy(filteredData, 'calismaSaati');
    const avgAgents = Math.round(_.meanBy(filteredData, 'ajanSayisi'));
    const dataPeriod = filteredData.length;

    // Saatlik ortalama çağrı
    const totalWorkingHours = _.sumBy(filteredData, 'calismaSaati');
    const callsPerHour = totalWorkingHours > 0 ? Math.round(totalCalls / totalWorkingHours) : 0;

    // AHT hesaplama
    const aht = totalCalls > 0 ? (totalHandleTime / totalCalls) / 60 : 0;

    // Traffic intensity (Erlang)
    const trafficIntensity = totalWorkingHours > 0 ? (totalHandleTime / 3600) / (totalWorkingHours / dataPeriod) : 0;

    // Utilization
    const utilization = avgAgents > 0 ? (trafficIntensity / avgAgents) * 100 : 0;

    // Erlang C formülü
    let erlangC = 0;
    let serviceLevel = 0;
    let averageWaitTime = 0;
    let requiredAgents = avgAgents;

    if (trafficIntensity > 0 && avgAgents > trafficIntensity) {
      erlangC = (Math.pow(trafficIntensity, avgAgents) / factorial(avgAgents)) * 
                (avgAgents / (avgAgents - trafficIntensity)) /
                (Array.from({length: avgAgents}, (_, i) => 
                  Math.pow(trafficIntensity, i) / factorial(i)
                ).reduce((a, b) => a + b, 0) + 
                (Math.pow(trafficIntensity, avgAgents) / factorial(avgAgents)) * 
                (avgAgents / (avgAgents - trafficIntensity)));

      averageWaitTime = (erlangC * (aht * 60)) / (avgAgents - trafficIntensity);
      serviceLevel = (1 - erlangC * Math.exp(-((avgAgents - trafficIntensity) * targets.answerTime) / (aht * 60))) * 100;

      // Gerekli ajan sayısı hesaplama
      for (let a = 1; a <= 100; a++) {
        if (a <= trafficIntensity) continue;
        
        const tempErlangC = (Math.pow(trafficIntensity, a) / factorial(a)) * 
                           (a / (a - trafficIntensity)) /
                           (Array.from({length: a}, (_, i) => 
                             Math.pow(trafficIntensity, i) / factorial(i)
                           ).reduce((sum, val) => sum + val, 0) + 
                           (Math.pow(trafficIntensity, a) / factorial(a)) * 
                           (a / (a - trafficIntensity)));

        const tempSL = (1 - tempErlangC * Math.exp(-((a - trafficIntensity) * targets.answerTime) / (aht * 60))) * 100;

        if (tempSL >= targets.serviceLevel) {
          requiredAgents = a;
          break;
        }
      }
    }

    return {
      totalCalls,
      totalHandleTime,
      avgWorkingHours: Math.round(avgWorkingHours * 100) / 100,
      avgAgents,
      callsPerHour,
      aht: Math.round(aht * 100) / 100,
      trafficIntensity: Math.round(trafficIntensity * 100) / 100,
      utilization: Math.round(utilization * 100) / 100,
      serviceLevel: Math.round(serviceLevel * 100) / 100,
      averageWaitTime: Math.round(averageWaitTime * 100) / 100,
      requiredAgents,
      agentDifference: requiredAgents - avgAgents,
      dataPeriod
    };
  }, [filteredData, targets]);

  // Faktöriyel hesaplama
  function factorial(n) {
    if (n <= 1) return 1;
    let result = 1;
    for (let i = 2; i <= n; i++) {
      result *= i;
    }
    return result;
  }

  // Günlük performans grafiği için veri
  const dailyPerformanceData = useMemo(() => {
    if (filteredData.length === 0) return [];

    const dailyStats = _.groupBy(filteredData, 'tarih');
    
    return Object.keys(dailyStats).sort().map(date => {
      const dayData = dailyStats[date];
      const dailyCalls = _.sumBy(dayData, 'gunlukCagriSayisi');
      const dailyHandleTime = _.sumBy(dayData, 'toplamKonusmaSuresi');
      const dailyWorkingHours = _.sumBy(dayData, 'calismaSaati');
      const dailyAgents = _.sumBy(dayData, 'ajanSayisi');

      const aht = dailyCalls > 0 ? (dailyHandleTime / dailyCalls) / 60 : 0;
      const utilization = dailyAgents > 0 && dailyWorkingHours > 0 ? 
        ((dailyHandleTime / 3600) / dailyAgents) * 100 : 0;

      return {
        tarih: date,
        cagriSayisi: dailyCalls,
        aht: Math.round(aht * 100) / 100,
        utilization: Math.round(utilization * 100) / 100
      };
    });
  }, [filteredData]);

  // Ekip performans karşılaştırması
  const teamComparisonData = useMemo(() => {
    if (filteredData.length === 0) return [];

    const teamStats = _.groupBy(filteredData, 'ekipAdi');
    
    return Object.keys(teamStats).map(team => {
      const teamData = teamStats[team];
      const totalCalls = _.sumBy(teamData, 'gunlukCagriSayisi');
      const totalHandleTime = _.sumBy(teamData, 'toplamKonusmaSuresi');
      const avgAgents = _.meanBy(teamData, 'ajanSayisi');
      
      const aht = totalCalls > 0 ? (totalHandleTime / totalCalls) / 60 : 0;
      const avgCallsPerDay = totalCalls / teamData.length;

      return {
        ekip: team,
        ortalamaCagri: Math.round(avgCallsPerDay),
        aht: Math.round(aht * 100) / 100,
        ajanSayisi: Math.round(avgAgents)
      };
    });
  }, [filteredData]);

  const COLORS = ['#10B981', '#EF4444', '#3B82F6', '#F59E0B', '#8B5CF6', '#06B6D4'];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4 flex items-center justify-center gap-3">
            <Calculator className="text-blue-400" />
            Çoklu Ekip Erlang C Analiz Sistemi
          </h1>
          <p className="text-blue-200 text-lg">
            Excel dosyasından veri yükleyin ve ekip bazlı performans analizleri yapın
          </p>
        </div>

        {/* Navigation */}
        <div className="flex justify-center mb-8">
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-1">
            <button
              onClick={() => setActiveTab('upload')}
              className={`px-6 py-3 rounded-lg font-medium transition-all ${
                activeTab === 'upload' 
                  ? 'bg-blue-600 text-white shadow-lg' 
                  : 'text-blue-200 hover:text-white'
              }`}
            >
              <Upload className="inline mr-2" size={20} />
              Veri Yükleme
            </button>
            <button
              onClick={() => setActiveTab('calculator')}
              disabled={!isDataProcessed}
              className={`px-6 py-3 rounded-lg font-medium transition-all ${
                activeTab === 'calculator' 
                  ? 'bg-blue-600 text-white shadow-lg' 
                  : !isDataProcessed
                  ? 'text-gray-500 cursor-not-allowed'
                  : 'text-blue-200 hover:text-white'
              }`}
            >
              <Calculator className="inline mr-2" size={20} />
              Hesaplama
            </button>
            <button
              onClick={() => setActiveTab('analysis')}
              disabled={!isDataProcessed}
              className={`px-6 py-3 rounded-lg font-medium transition-all ${
                activeTab === 'analysis' 
                  ? 'bg-blue-600 text-white shadow-lg' 
                  : !isDataProcessed
                  ? 'text-gray-500 cursor-not-allowed'
                  : 'text-blue-200 hover:text-white'
              }`}
            >
              <TrendingUp className="inline mr-2" size={20} />
              Analiz
            </button>
          </div>
        </div>

        {activeTab === 'upload' && (
          <div className="max-w-4xl mx-auto">
            {/* Excel Formatı */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20 mb-8">
              <h2 className="text-2xl font-bold text-white mb-6 flex items-center gap-2">
                <FileSpreadsheet className="text-green-400" />
                Excel Dosya Formatı
              </h2>
              
              <div className="bg-white/5 rounded-lg p-4 mb-6">
                <h3 className="text-lg font-semibold text-white mb-3">Gerekli Kolonlar:</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-blue-200">
                  <div>• <strong>Ekip_Adi:</strong> Ekip adı</div>
                  <div>• <strong>Tarih:</strong> YYYY-MM-DD formatı</div>
                  <div>• <strong>Gunluk_Cagri_Sayisi:</strong> Günlük çağrı sayısı</div>
                  <div>• <strong>Toplam_Konusma_Suresi_Saniye:</strong> Saniye cinsinden</div>
                  <div>• <strong>Calisma_Saati:</strong> Günlük çalışma saati</div>
                  <div>• <strong>Ajan_Sayisi:</strong> O gün çalışan ajan sayısı</div>
                </div>
              </div>

              <button
                onClick={downloadTemplate}
                className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-all flex items-center gap-2 mb-6"
              >
                <Download size={20} />
                Örnek Excel Dosyasını İndir
              </button>
            </div>

            {/* Dosya Yükleme */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
              <h2 className="text-2xl font-bold text-white mb-6">Excel Dosyası Yükle</h2>
              
              <div className="border-2 border-dashed border-blue-400 rounded-lg p-8 text-center">
                <Upload className="mx-auto text-blue-400 mb-4" size={48} />
                <input
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={handleFileUpload}
                  className="hidden"
                  id="file-upload"
                />
                <label
                  htmlFor="file-upload"
                  className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-all cursor-pointer inline-block"
                >
                  Excel Dosyası Seç
                </label>
                <p className="text-blue-200 mt-4">
                  .xlsx veya .xls formatında dosya yükleyebilirsiniz
                </p>
              </div>

              {isDataProcessed && (
                <div className="mt-6 p-4 bg-green-500/20 rounded-lg">
                  <h4 className="text-lg font-semibold text-white mb-2">✅ Veri Başarıyla Yüklendi</h4>
                  <div className="text-green-200 grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>Toplam Kayıt: {uploadedData.length}</div>
                    <div>Ekip Sayısı: {teams.length}</div>
                    <div>Başlangıç: {dateRange.start}</div>
                    <div>Bitiş: {dateRange.end}</div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'calculator' && isDataProcessed && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Filtreler */}
            <div className="lg:col-span-1">
              <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20 mb-8">
                <h2 className="text-2xl font-bold text-white mb-6 flex items-center gap-2">
                  <Settings className="text-blue-400" />
                  Filtreler
                </h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-blue-200 text-sm font-medium mb-2">
                      Ekip Seçimi
                    </label>
                    <select
                      value={selectedTeam}
                      onChange={(e) => setSelectedTeam(e.target.value)}
                      className="w-full px-4 py-3 rounded-lg bg-white/5 border border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="all">Tüm Ekipler</option>
                      {teams.map(team => (
                        <option key={team} value={team}>{team}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-blue-200 text-sm font-medium mb-2">
                      Başlangıç Tarihi
                    </label>
                    <input
                      type="date"
                      value={dateRange.start}
                      onChange={(e) => setDateRange({...dateRange, start: e.target.value})}
                      className="w-full px-4 py-3 rounded-lg bg-white/5 border border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-blue-200 text-sm font-medium mb-2">
                      Bitiş Tarihi
                    </label>
                    <input
                      type="date"
                      value={dateRange.end}
                      onChange={(e) => setDateRange({...dateRange, end: e.target.value})}
                      className="w-full px-4 py-3 rounded-lg bg-white/5 border border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>

                <h3 className="text-xl font-bold text-white mb-4 mt-8 flex items-center gap-2">
                  <Target className="text-green-400" />
                  Hedefler
                </h3>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-blue-200 text-sm font-medium mb-2">
                      Service Level Hedefi (%)
                    </label>
                    <input
                      type="number"
                      value={targets.serviceLevel}
                      onChange={(e) => setTargets({...targets, serviceLevel: parseInt(e.target.value) || 0})}
                      className="w-full px-4 py-3 rounded-lg bg-white/5 border border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-green-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-blue-200 text-sm font-medium mb-2">
                      Cevaplama Süresi (saniye)
                    </label>
                    <input
                      type="number"
                      value={targets.answerTime}
                      onChange={(e) => setTargets({...targets, answerTime: parseInt(e.target.value) || 0})}
                      className="w-full px-4 py-3 rounded-lg bg-white/5 border border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-green-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-blue-200 text-sm font-medium mb-2">
                      Hedef Utilization (%)
                    </label>
                    <input
                      type="number"
                      value={targets.utilizationTarget}
                      onChange={(e) => setTargets({...targets, utilizationTarget: parseInt(e.target.value) || 0})}
                      className="w-full px-4 py-3 rounded-lg bg-white/5 border border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-green-500"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Sonuçlar */}
            <div className="lg:col-span-2">
              {/* KPI Cards */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
                <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-4 text-white">
                  <div className="flex items-center justify-between">
                    <Phone size={24} />
                    <span className="text-2xl font-bold">{calculations.totalCalls.toLocaleString()}</span>
                  </div>
                  <p className="text-blue-100 text-sm mt-2">Toplam Çağrı</p>
                </div>
                
                <div className="bg-gradient-to-br from-green-500 to-green-600 rounded-xl p-4 text-white">
                  <div className="flex items-center justify-between">
                    <Clock size={24} />
                    <span className="text-2xl font-bold">{calculations.aht}</span>
                  </div>
                  <p className="text-green-100 text-sm mt-2">AHT (dakika)</p>
                </div>
                
                <div className="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl p-4 text-white">
                  <div className="flex items-center justify-between">
                    <Activity size={24} />
                    <span className="text-2xl font-bold">{calculations.utilization}%</span>
                  </div>
                  <p className="text-purple-100 text-sm mt-2">Utilization</p>
                </div>
                
                <div className="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl p-4 text-white">
                  <div className="flex items-center justify-between">
                    <Users size={24} />
                    <span className="text-2xl font-bold">{calculations.requiredAgents}</span>
                  </div>
                  <p className="text-orange-100 text-sm mt-2">Gerekli Ajan</p>
                </div>
              </div>

              {/* Veri Özeti */}
              <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20 mb-8">
                <h3 className="text-2xl font-bold text-white mb-6">Veri Özeti</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                  <div className="bg-white/5 rounded-lg p-4">
                    <div className="text-2xl font-bold text-white">{calculations.dataPeriod}</div>
                    <div className="text-blue-200 text-sm">Gün Sayısı</div>
                  </div>
                  <div className="bg-white/5 rounded-lg p-4">
                    <div className="text-2xl font-bold text-white">{calculations.avgAgents}</div>
                    <div className="text-blue-200 text-sm">Ort. Ajan</div>
                  </div>
                  <div className="bg-white/5 rounded-lg p-4">
                    <div className="text-2xl font-bold text-white">{calculations.callsPerHour}</div>
                    <div className="text-blue-200 text-sm">Saatlik Çağrı</div>
                  </div>
                  <div className="bg-white/5 rounded-lg p-4">
                    <div className="text-2xl font-bold text-white">{calculations.avgWorkingHours}</div>
                    <div className="text-blue-200 text-sm">Ort. Çal. Saati</div>
                  </div>
                </div>
              </div>

              {/* Ana Sonuçlar */}
              <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
                <h3 className="text-2xl font-bold text-white mb-6">Erlang C Hesaplama Sonuçları</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="bg-white/5 rounded-lg p-4">
                    <h4 className="text-lg font-semibold text-white mb-3">Service Level</h4>
                    <div className="flex items-center gap-4">
                      <span className="text-3xl font-bold text-white">{calculations.serviceLevel}%</span>
                      <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                        calculations.serviceLevel >= targets.serviceLevel 
                          ? 'bg-green-500/20 text-green-300' 
                          : 'bg-red-500/20 text-red-300'
                      }`}>
                        Hedef: {targets.serviceLevel}%
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white/5 rounded-lg p-4">
                    <h4 className="text-lg font-semibold text-white mb-3">Ortalama Bekleme</h4>
                    <div className="flex items-center gap-4">
                      <span className="text-3xl font-bold text-white">{calculations.averageWaitTime}s</span>
                      <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                        calculations.averageWaitTime <= targets.answerTime 
                          ? 'bg-green-500/20 text-green-300' 
                          : 'bg-red-500/20 text-red-300'
                      }`}>
                        Hedef: {targets.answerTime}s
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white/5 rounded-lg p-4">
                    <h4 className="text-lg font-semibold text-white mb-3">Traffic Intensity</h4>
                    <div className="text-3xl font-bold text-white">{calculations.trafficIntensity} Erlang</div>
                  </div>
                  
                  <div className="bg-white/5 rounded-lg p-4">
                    <h4 className="text-lg font-semibold text-white mb-3">Ajan Önerisi</h4>
                    <div className="flex items-center gap-4">
                      <span className="text-3xl font-bold text-white">{calculations.requiredAgents}</span>
                      <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                        calculations.agentDifference > 0 
                          ? 'bg-red-500/20 text-red-300' 
                          : calculations.agentDifference < 0
                          ? 'bg-green-500/20 text-green-300'
                          : 'bg-blue-500/20 text-blue-300'
                      }`}>
                        {calculations.agentDifference > 0 ? '+' : ''}{calculations.agentDifference}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-6 p-4 bg-blue-500/20 rounded-lg">
                  <h4 className="text-lg font-semibold text-white mb-2">📊 Analiz Sonucu</h4>
                  <p className="text-blue-200">
                    {selectedTeam === 'all' 
                      ? `Tüm ekipler için ${calculations.dataPeriod} günlük veri analizi: `
                      : `${selectedTeam} ekibi için ${calculations.dataPeriod} günlük veri analizi: `
                    }
                    {calculations.agentDifference > 0 
                      ? `Service level hedefinize ulaşmak için ${calculations.agentDifference} ajan daha eklemelisiniz.`
                      : calculations.agentDifference < 0
                      ? `Mevcut ajan sayınız hedefler için fazla, ${Math.abs(calculations.agentDifference)} ajan azaltabilirsiniz.`
                      : 'Mevcut ajan sayınız hedefleriniz için optimal durumda.'}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'analysis' && isDataProcessed && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Günlük Performans */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
              <h3 className="text-2xl font-bold text-white mb-6">Günlük Performans Trendi</h3>
              <ResponsiveContainer width="100%" height={400}>
                <LineChart data={dailyPerformanceData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#ffffff20" />
                  <XAxis 
                    dataKey="tarih" 
                    stroke="#fff"
                    angle={-45}
                    textAnchor="end"
                    height={80}
                  />
                  <YAxis stroke="#fff" />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'rgba(0,0,0,0.8)', 
                      border: 'none', 
                      borderRadius: '8px',
                      color: '#fff'
                    }} 
                  />
                  <Legend />
                  <Line 
                    type="monotone" 
                    dataKey="cagriSayisi" 
                    stroke="#3B82F6" 
                    strokeWidth={3}
                    name="Çağrı Sayısı"
                  />
                  <Line 
                    type="monotone" 
                    dataKey="utilization" 
                    stroke="#F59E0B" 
                    strokeWidth={3}
                    name="Utilization (%)"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>

            {/* Ekip Karşılaştırması */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
              <h3 className="text-2xl font-bold text-white mb-6">Ekip Performans Karşılaştırması</h3>
              <ResponsiveContainer width="100%" height={400}>
                <BarChart data={teamComparisonData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#ffffff20" />
                  <XAxis 
                    dataKey="ekip" 
                    stroke="#fff"
                    angle={-45}
                    textAnchor="end"
                    height={80}
                  />
                  <YAxis stroke="#fff" />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'rgba(0,0,0,0.8)', 
                      border: 'none', 
                      borderRadius: '8px',
                      color: '#fff'
                    }} 
                  />
                  <Legend />
                  <Bar dataKey="ortalamaCagri" fill="#10B981" name="Ort. Günlük Çağrı" />
                  <Bar dataKey="aht" fill="#3B82F6" name="AHT (dakika)" />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* AHT Dağılımı */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
              <h3 className="text-2xl font-bold text-white mb-6">AHT Trend Analizi</h3>
              <ResponsiveContainer width="100%" height={400}>
                <AreaChart data={dailyPerformanceData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#ffffff20" />
                  <XAxis 
                    dataKey="tarih" 
                    stroke="#fff"
                    angle={-45}
                    textAnchor="end"
                    height={80}
                  />
                  <YAxis stroke="#fff" />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'rgba(0,0,0,0.8)', 
                      border: 'none', 
                      borderRadius: '8px',
                      color: '#fff'
                    }} 
                  />
                  <Area 
                    type="monotone" 
                    dataKey="aht" 
                    stroke="#8B5CF6" 
                    fill="#8B5CF6"
                    fillOpacity={0.3}
                    name="AHT (dakika)"
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>

            {/* Ekip Ajan Dağılımı */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
              <h3 className="text-2xl font-bold text-white mb-6">Ekip Ajan Dağılımı</h3>
              <ResponsiveContainer width="100%" height={400}>
                <PieChart>
                  <Pie
                    data={teamComparisonData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ ekip, ajanSayisi }) => `${ekip}: ${ajanSayisi}`}
                    outerRadius={120}
                    fill="#8884d8"
                    dataKey="ajanSayisi"
                  >
                    {teamComparisonData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>

            {/* Özet İstatistikler */}
            <div className="lg:col-span-2 bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
              <h3 className="text-2xl font-bold text-white mb-6">Özet İstatistikler</h3>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                <div className="text-center">
                  <div className="text-3xl font-bold text-white mb-2">
                    {Math.round((calculations.totalHandleTime / 3600) * 100) / 100}
                  </div>
                  <div className="text-blue-200">Toplam Konuşma (Saat)</div>
                </div>
                
                <div className="text-center">
                  <div className="text-3xl font-bold text-white mb-2">
                    {Math.round((calculations.totalCalls / calculations.dataPeriod) * 100) / 100}
                  </div>
                  <div className="text-blue-200">Günlük Ort. Çağrı</div>
                </div>
                
                <div className="text-center">
                  <div className="text-3xl font-bold text-white mb-2">
                    {teams.length}
                  </div>
                  <div className="text-blue-200">Toplam Ekip</div>
                </div>
                
                <div className="text-center">
                  <div className="text-3xl font-bold text-white mb-2">
                    {calculations.dataPeriod}
                  </div>
                  <div className="text-blue-200">Analiz Dönemi (Gün)</div>
                </div>
              </div>

              {/* Ekip Detay Tablosu */}
              <div className="mt-8">
                <h4 className="text-xl font-bold text-white mb-4">Ekip Detay Raporu</h4>
                <div className="overflow-x-auto">
                  <table className="w-full text-white">
                    <thead>
                      <tr className="border-b border-white/20">
                        <th className="text-left py-2">Ekip Adı</th>
                        <th className="text-center py-2">Ort. Günlük Çağrı</th>
                        <th className="text-center py-2">AHT (dk)</th>
                        <th className="text-center py-2">Ort. Ajan</th>
                        <th className="text-center py-2">Durum</th>
                      </tr>
                    </thead>
                    <tbody>
                      {teamComparisonData.map((team, index) => (
                        <tr key={index} className="border-b border-white/10">
                          <td className="py-3 font-medium">{team.ekip}</td>
                          <td className="text-center py-3">{team.ortalamaCagri}</td>
                          <td className="text-center py-3">{team.aht}</td>
                          <td className="text-center py-3">{team.ajanSayisi}</td>
                          <td className="text-center py-3">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              team.aht <= 3 
                                ? 'bg-green-500/20 text-green-300' 
                                : team.aht <= 5
                                ? 'bg-yellow-500/20 text-yellow-300'
                                : 'bg-red-500/20 text-red-300'
                            }`}>
                              {team.aht <= 3 ? 'İyi' : team.aht <= 5 ? 'Orta' : 'Dikkat'}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ErlangCCalculator;